generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI_BOT")
}

model User {
  id            String       @id @default(uuid()) @map("_id") @db.String
  name          String
  image         String?
  email         String?      @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt     DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  sessions      Session[]
  accounts      Account[]
}

model Account {
  id                String   @id @default(uuid()) @map("_id") @db.String
  userId            String   @db.String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(uuid()) @map("_id") @db.String
  sessionToken  String   @unique
  userId        String   @db.String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id") @db.String
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guild {
  id                String              @id @default(uuid()) @map("_id") @db.String
  guildId           String              @unique
  FormEntry         FormEntry?          @relation
  ticketConfig      TicketConfig?       @relation
  lobbyConfig       LobbyConfig?        @relation
  customStatus      CustomStatusRole?   @relation
}

model CustomStatusRole {
  id             String      @id @default(uuid()) @map("_id") @db.String
  statusTerms    String[]
  roleIds        String[]
  warnChannelId  String?

  guildId        String      @unique
  guild          Guild       @relation(fields: [guildId], references: [guildId])

  @@map("CustomStatusRoles")
}

model FormEntry {
  id                     String      @id @default(uuid()) @map("_id") @db.String
  formChannelId          String?
  rolesMemberApproved    String[]
  rolesVerification      String[]

  guildId                String      @unique
  guild                  Guild       @relation(fields: [guildId], references: [guildId])
}

model LobbyConfig {
  id                String      @id @default(uuid()) @map("_id") @db.String
  lobbyCommandImage String?

  guildId           String      @unique
  guild             Guild       @relation(fields: [guildId], references: [guildId])
}

model TicketConfig {
  id                String      @id @default(uuid()) @map("_id") @db.String
  ticketCategoryId  String?

  guildId           String      @unique
  guild             Guild       @relation(fields: [guildId], references: [guildId])
}
